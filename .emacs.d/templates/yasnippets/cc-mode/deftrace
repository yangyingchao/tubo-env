# -*- mode: snippet; require-final-newline: nil -*-
# name: deftrace
# key: dftr
# --
#include <execinfo.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#ifndef __THREAD__
#ifdef _PTHREAD_H
#define __THREAD__ (unsigned long long)pthread_self()
#else
#define __THREAD__ (unsigned long long)0
#endif
#endif

#ifndef PTRACE
#define PTRACE(fmt, ...) \\$>
  do \\$>
  { \\$>
    void *bt_buffer[100]; \\$>
    const char *str_ptr    = NULL; \\$>
    char *allocated_buffer = NULL; \\$>
    time_t ts              = time(NULL); \\$>
    struct tm tm_tmp, *start = &tm_tmp; \\$>
    int nptrs = backtrace(bt_buffer, 64); \\$>
    if (nptrs <= 0) \\$>
      str_ptr = "Can't get backtrace."; \\$>
    else \\$>
    { \\$>
      char **strings = backtrace_symbols(bt_buffer, nptrs); \\$>
      if (strings == NULL) \\$>
        str_ptr = "backtrace_symbols failed"; \\$>
      else \\$>
      { \\$>
        size_t buf_size  = 64 * 1024; \\$>
        allocated_buffer = (char *)malloc(buf_size); \\$>
        if (!allocated_buffer) \\$>
          str_ptr = "Can't allocate space for backtraces."; \\$>
        else \\$>
        { \\$>
          char *b_ptr = allocated_buffer; \\$>
          int left    = buf_size, j; \\$>
          str_ptr     = allocated_buffer; \\$>
          for (j = 0; j < nptrs; j++) \\$>
          { \\$>
            int ret = snprintf(b_ptr, left, "[%02d]: %s\n", j, strings[j]); \\$>
            if (ret >= left) \\$>
              break; \\$>
            else \\$>
            { \\$>
              b_ptr += ret; \\$>
              left -= ret; \\$>
            } \\$>
          } \\$>
        } \\$>
        free(strings); \\$>
      } \\$>
    } \\$>
    localtime_r(&ts, start); \\$>
    fprintf(stderr, "%02d%02d%02d %2d:%02d:%02d : [%08llX] - %s:%04d -- %s: " fmt ":\n%s\n", \\$>
            start->tm_year % 100, start->tm_mon + 1, start->tm_mday, start->tm_hour, \\$>
            start->tm_min, start->tm_sec, __THREAD__, __FILE__, __LINE__, __FUNCTION__, \\$>
            ##__VA_ARGS__, str_ptr); \\$>
    if (allocated_buffer) \\$>
      free(allocated_buffer); \\$>
  } while (0)
#endif