#!/bin/bash
#
# Author: Yang,Ying-chao <yangyingchao@gmail.com>, 2016-09-18
#
###
### Run emacs.
###
### Usage:
###   run-emacs [OPTIONS] file:line
###
### Options:
###   -N        Start new emacs instance (ignore running servers)
###   -D        Show debug log
###   -h        Show this message
###   -n		Don't wait for the server to return
###   -t 		Open a new Emacs frame on the current terminal
###   -c    	Create a new frame instead of trying to use the current Emacs frame
###   -e        Evaluate the FILE arguments as ELisp expressions

source ~/.local/bin/common.sh

# export LC_CTYPE="C"
# export LC_ALL=

ARCH=`uname`

function die ()
{
    set +xe
    echo ""
    echo "================================ DIE ==============================="
    echo "$@"
    echo "Call stack:"
    local n=$((${#BASH_LINENO[@]}-1))
    local i=0
    while [ $i -lt $n ]; do
        local line=${BASH_LINENO[i]}
        local func=${FUNCNAME[i+1]}

        i=$((i+1))

        echo "    [$i] -- line $line -- $func"
    done
    echo "================================ END ==============================="
    exit 1
}

function help() {
    sed -rn 's/^### ?//;T;p' "$0"
}

# check if emacs is available.
# When environment variable EMACS is set, use it if it exists (executable), or report error.
function prepare-executable ()
{
    if [ -n "${EMACS}" ]; then
        which ${EMACS} >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            die "User specified emacs ${EMACS} does not exist!"
        else
            # TODO: check EMACSCLIENT...
            return 0
        fi
    fi

    for suffix in "-pgtk-native" "-native" ""; do
        EMACS=emacs${suffix}
        PDEBUG "Checking: ${EMACS}"
        which ${EMACS} > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            for client_suffix in "-${EMACS}" "${suffix}"; do
                EMACSCLIENT="emacsclient${client_suffix}"
                PDEBUG "Checking client: $EMACSCLIENT"
                which $EMACSCLIENT >/dev/null 2>&1 && break
            done
            break
        fi
    done

    if [ $ARCH = 'Darwin' ] && [ -f /Applications/Emacs.app/Contents/MacOS/Emacs ] ; then
        PDEBUG "macOS ..."
        EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
        EMACSCLIENT=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient
    fi

    [ -z "$EMACS" ] && die "Failed to find proper emacs executable..."

    return 0
}

_is_emacs_daemon_started () {
    netstat -nl 2> /dev/null | awk '{print $NF}' | grep -q "emacs.*server"
}

_is_emacs_window_exist () {
    _is_emacs_daemon_started && \
        $EMACSCLIENT -e '(>= (length (visible-frame-list)) 2 )' | grep -q -x t
}

_raise_emacs() {
    PDEBUG "Rasing emacs instance: ARCH: ${ARCH}, WAYLAND: ${WAYLAND_DISPLAY}, DISPLAY: ${DISPLAY}"
    if [ $ARCH = 'Linux' ]; then
        if [ -n "$WAYLAND_DISPLAY" ]; then
            ~/.config/sway/scripts/workspace_util.sh find emacs
        elif [ -n "$DISPLAY" ]; then
            which wmctrl > /dev/null 2>&1 && wmctrl -xa "emacs.Emacs"
        fi
    elif [ $ARCH = 'Darwin' ]; then
        osascript -e 'tell application "Emacs" to activate'
    else
        echo "Unsupported platform"
    fi
}

function ensure_emacs_started ()
{
    _is_emacs_daemon_started && return 0
    if [ $? -ne 0 ] ; then

        # generate core, if emacs crashes..
        cd ~
        ulimit -c unlimited
        $EMACS --daemon || die "Failed to start emacs"
    fi

    echo "Waiting emacs to be started..."
    counter=1
    while [ 1 ]; do
        _is_emacs_daemon_started
        if [ $? -ne 0 ]; then
            if [ ${counter > 15} ]; then
                die "Emacs did not start in 15 seconds...."
            fi

            echo "        ${counter}"
            counter=$((counter+1))
            sleep 1
        else
            break
        fi
    done
}

files=()
function parse_files ()
{
    for file in $@; do
        PDEBUG "FILE: ${file}"

        if [[ "${file}" =~ org-protocol: ]]; then
            PDEBUG "org-protocol:"
            files+=(${file})
        else
            local fn=
            local ln=
            local cn=

            fn=`echo "$file" | awk -F ":" '{print $1}'`
            ln=`echo "$file" | awk -F ":" '{print $2}'`
            cn=`echo "$file" | awk -F ":" '{print $3}'`

            if [ -z $ln ]; then
                files+=($fn)
            else
                if [ -z "$cn" ]; then
                    files+=("+$ln" $fn)
                else
                    files+=("+${ln}:${cn}" $fn)
                fi
            fi
        fi
    done
}

args=()

NEW_INSTANCE=
# Get arguments passed to emacsclient.
while getopts NhDtnce: var; do
    case $var in
        h)
            help
            exit 0
            ;;
        D)
            export DEBUG=1
            DEBUG=1 ;;
        N)
            NEW_INSTANCE=1 ;;
        t)
            args+=("-t");;
        n)
            args+=("-n");;
        c)
            args+=("-c");;
        e)
            args+=("-e")
            args+=("$OPTARG")
            ;;
        *)
            echo "??? $var"
            help
            exit 1
            ;;
    esac
done
shift $(($OPTIND - 1))

prepare-executable || die "Failed to find proper emacs executable."
PDEBUG "EMACS: ${EMACS}, CLIENT: ${EMACSCLIENT}"

parse_files $@

if [ -n "$NEW_INSTANCE" ]; then
    $EMACS ${files[@]}
else
    ensure_emacs_started

    if [ -z "$args" ]; then
        if [ "$ARCH" = 'Linux' ]; then
            if [ -z "${WAYLAND_DISPLAY}" ] && [ -z "$DISPLAY" ]; then
                args="-t ."
            else
                args="-n"
            fi
        elif [ "$ARCH" = 'Darwin' ]; then
            args="-n"
        fi

    fi

    gui_mode=
    [[ "$args[@]" =~ -t ]] || gui_mode=1


    if [[ ! "$args[@]" =~ -t ]]; then
        _is_emacs_window_exist || args+=("-c")
    fi

    PDEBUG "Args to ${EMACSCLIENT}: ${args[@]} ${files[@]}"

    $EMACSCLIENT ${args[@]} ${files[@]}

    PDEBUG "${EMACSCLIENT} returns $?"

    if [ $? -eq 0 ] && [ -n "${gui_mode}" ]; then
        _raise_emacs
    fi
fi
